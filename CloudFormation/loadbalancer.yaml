# Note: currently hard coding VPC ID and subnet IDs
AWSTemplateFormatVersion: "2010-09-09"
Description: ECR repo mnist service
Parameters:
  EnvironmentName:
    Default: staging
    Description: Name of the environment this cloudformation stack belongs to
    Type: String
Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: mnist-aws-lb
      Subnets: [subnet-04f4148408f8253f6, subnet-0f0b9d47ec7bbff44]
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for loadbalancer to services on ECS
      VpcId: vpc-0311e042926ba3eff
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: aws-training-default
      VpcId: vpc-0311e042926ba3eff
      Protocol: HTTP
      Port: 80
Outputs:
  LoadBalancerDNS:
    Description: Domain name for the loadbalancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Join [':', [ !Ref EnvironmentName, MNISTServiceDomainName ]]
  LoadBalancerListener:
    Description: loadbalancer listener
    Value: !Ref LoadBalancerListener
    Export:
      Name: !Join [':', [ !Ref EnvironmentName, MNISTServiceLoadBalancerListener ]]
  LoadBalancerSecurityGroup:
    Description: Loadbalancer security group
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: !Join [':', [ !Ref EnvironmentName, MNISTServiceLoadBalancerSecurityGroup ]]